@model IEnumerable<ProProperty.Models.PropertyWithPremises>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
.legendtable th,td {
    overflow: hidden;
    width: 200px;
}
</style>
<div class="row">
    <img src="~/Image/header.png" />
</div>

<!--include to create javascript -->
<script src="~/Scripts/googleApi.js">
</script>  

<script type="text/javascript">
    $(document).ready(function(){
        $('div.col-md-1.dropdown button').on('click', function (event) {
            $(this).parent().toggleClass('open');
        });

        $('body').on('click', function (e) {
            if (!$('div.col-md-1.dropdown').is(e.target)
                && $('div.col-md-1.dropdown').has(e.target).length === 0
                && $('.open').has(e.target).length === 0
            ) {
                $('div.col-md-1.dropdown').removeClass('open');
            }
        });//End of body.onClick function body
    });//End of document.ready function body
</script>
<div class="row">

    @using (Html.BeginForm("SearchProperty", "Search", FormMethod.Post))
    {

        <div class="row">
            <div class="col-md-2 @{if (ViewBag.ErrorPriceRange != null) {@Html.Raw("has-error")}}">@Html.DropDownList("priceRange_DDL", null, new { @class = "form-control" })</div>
            <div class="col-md-2 @{if (ViewBag.ErrorPropertyType != null) {@Html.Raw("has-error")} } ">@Html.DropDownList("propertyType_DDL", null, new { @class = "form-control" })</div>
            <div class="col-md-2 @{if (ViewBag.ErrorRoomType != null) {@Html.Raw("has-error")}}">@Html.DropDownList("roomType_DDL", null, new { @class = "form-control" })</div>
            <div class="col-md-2 @{if (ViewBag.ErrorDistrict != null) {@Html.Raw("has-error")}}">@Html.DropDownList("district_DDL", null, new { @class = "form-control" })</div>
            <div class="col-md-1 dropdown">
                <button class="btn btn-default dropdown-toggle" type="button">
                    Premises<span class="caret" />
                </button>
                <ul class="dropdown-menu">
                    @{
                        foreach (ProProperty.Models.PremiseType item in ViewBag.PremiseType)
                        {
                            <li>
                                <a href="#" data-value="@item.premises_type_name">
                                    @Html.CheckBox(item.premises_type_name, item.isChecked)
                                    @item.premises_type_name
                                </a>
                            </li>
                        }
                    }
                </ul>
            </div>
            <div class="col-md-2"><button type="submit" class="btn btn-success btn-md">Go</button></div>

        </div><br />
      
    }
</div>

<div class="row">
    @if (Model != null)
    {
        <script>
            @{ List<ProProperty.Models.Property> propertyList = new List<ProProperty.Models.Property>(); };
            @foreach (ProProperty.Models.PropertyWithPremises item in Model.ToList<ProProperty.Models.PropertyWithPremises>())
            {
                propertyList.Add(item.property);
            }
            var unsortedPropertyList = @Html.Raw(Json.Encode(propertyList));
            
        </script>
        <h2>Result</h2> 
        <div class='col-md-4'>
            <a href="#" onclick="sort();">Sort by price</a>
            <table class="table table-striped" data-link="row" id="propertyTable">
                 <thead>
                     <tr>
                         @*<th width="5%">Hide/ Show</th>*@
                         <th>Address</th>
                         <th width="10%">Type</th>
                         <th>Price S$</th>
                     </tr>
                 </thead>
                 <tbody>
                </tbody>
            </table>
        </div>
    }

    <script>

        for(i = 0; i < unsortedPropertyList.length; i++){            
            var tableRef = document.getElementById('propertyTable').getElementsByTagName('tbody')[0];
            // Insert a row in the table at row index 0
            var newRow   = tableRef.insertRow(tableRef.rows.length);

            // Insert a cell in the row at index 0
            var addressCell  = newRow.insertCell(0);

            // Append a text node to the cell
            var address = "Blk " + unsortedPropertyList[i].block + " #" + unsortedPropertyList[i].unitFloor + "-" + unsortedPropertyList[i].unitNo + " " + unsortedPropertyList[i].address;
            var newTextAddress  = document.createTextNode(address);
            addressCell.appendChild(newTextAddress);

            // Insert a cell in the row at index 0
            var typeCell  = newRow.insertCell(1);

            // Append a text node to the cell
            var type = "" + unsortedPropertyList[i].propertyType;
            var newTextType  = document.createTextNode(type);
            typeCell.appendChild(newTextType);

            // Insert a cell in the row at index 0
            var priceCell  = newRow.insertCell(2);

            // Append a text node to the cell
            var price = "" + unsortedPropertyList[i].valuation;
            var newTextprice  = document.createTextNode(price);
            priceCell.appendChild(newTextprice);
        }
    </script>

    <script>
        function sort(){
            console.profile("sort");
            sortPropertyByPrice();
            console.profileEnd("sort");
        }

        function sortPropertyByPrice(){
            //console.time("sortPropertyByPrice");

            var sortedPropertyList = unsortedPropertyList;

            for(outer = 0; outer < sortedPropertyList.length; outer++){
                for(inner = outer + 1; inner < sortedPropertyList.length; inner++){
                    if(sortedPropertyList[outer].valuation < sortedPropertyList[inner].valuation){
                        var temp = sortedPropertyList[outer];
                        sortedPropertyList[outer] = sortedPropertyList[inner];
                        sortedPropertyList[inner] = temp;
                    }
                }
            }
            
            var tableTbody = document.getElementById('propertyTable').getElementsByTagName('tbody')[0];
            while(tableTbody.hasChildNodes())
            {
                tableTbody.removeChild(tableTbody.firstChild);
            }

            for(i = 0; i < sortedPropertyList.length; i++){            
                var tableRef = document.getElementById('propertyTable').getElementsByTagName('tbody')[0];
                // Insert a row in the table at row index 0
                var newRow   = tableRef.insertRow(tableRef.rows.length);

                // Insert a cell in the row at index 0
                var addressCell  = newRow.insertCell(0);

                // Append a text node to the cell
                var address = "Blk " + sortedPropertyList[i].block + " #" + sortedPropertyList[i].unitFloor + "-" + sortedPropertyList[i].unitNo + " " + sortedPropertyList[i].address;
                var newTextAddress  = document.createTextNode(address);
                addressCell.appendChild(newTextAddress);

                // Insert a cell in the row at index 0
                var typeCell  = newRow.insertCell(1);

                // Append a text node to the cell
                var type = "" + sortedPropertyList[i].propertyType;
                var newTextType  = document.createTextNode(type);
                typeCell.appendChild(newTextType);

                // Insert a cell in the row at index 0
                var priceCell  = newRow.insertCell(2);

                // Append a text node to the cell
                var price = "" + sortedPropertyList[i].valuation;
                var newTextprice  = document.createTextNode(price);
                priceCell.appendChild(newTextprice);
            }

        }
    </script>

    <script src="http://maps.googleapis.com/maps/api/js">
    </script>

    <script type="text/javascript">
        $(document).ready(function(){googleMap.init(); 
            @if (Model != null)
            {
                foreach (var item in Model)
                {
                    var location = Html.Raw(Json.Encode(item.property));
                    //System.Diagnostics.Debug.WriteLine(location);
                    <text>Marker.Create(@Html.DisplayFor(modelItem => item.property.propertyID), "@Html.DisplayFor(modelItem => item.property.address)", @Html.DisplayFor(modelItem => item.property.Latitude), @Html.DisplayFor(modelItem => item.property.Longitude),"@Html.DisplayFor(modelItem => item.property.propertyType)", "@Url.Action("PropertyDetails", "Property", new { id = item.property.propertyID } )", "@Url.Action("PropertyInformation", "Property", new { id = item.property.propertyID } )");</text>
                 }
             }
        });
    </script>
    @if (Model != null)
    {
        <div id="map_canvas" class="col-md-8" style="height:600px;"></div>
    }
    else
    {
        <div id="map_canvas" class="col-md-12" style="height:600px;width:100%;"></div>
    }
</div>
<div class="row">
    <h3>Legend</h3>
    <table class="legendtable">
        <thead>
            <tr>
                <th>Property</th>
                <th>Premises</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><img src="~/Image/icon/private.png" /> Private</td>
                <td><img src="~/Image/icon/clinic.png" /> Clinic</td>
                <td><img src="~/Image/icon/dining.png" /> Dining</td>
                <td><img src="~/Image/icon/school.png" /> School</td>
                <td></td>
            </tr>
            <tr>
                <td><img src="~/Image/icon/hdb.png"> HDB</td>
                <td><img src="~/Image/icon/gym.png" /> Gym</td>
                <td><img src="~/Image/icon/highway.png" /> Highway</td>
                <td><img src="~/Image/icon/supermarket.jpg" /> Supermarket</td>
                <td></td>
            </tr>
            <tr>
                <td><img src="~/Image/icon/landed.png"> Landed</td>
                <td><img src="~/Image/icon/park.png" /> Park</td>
                <td><img src="~/Image/icon/parking.png" /> Parking</td>
                <td><img src="~/Image/icon/train.png" /> Train</td>
                <td><img src="~/Image/icon/bus.png" /> Bus</td>
            </tr>
        </tbody>
    </table>
</div>


